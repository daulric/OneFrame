{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to OneFrame","text":""},{"location":"#what-is-oneframe","title":"What is OneFrame?","text":"<p>OneFrame is a module that allows developers to run multiple modular code under one server / client.</p> <p>It was designed to give developers a sense of ease when making games and other projects.</p>"},{"location":"#why-choose-oneframe","title":"Why Choose OneFrame","text":"<p>There was a problem with games always scripts all over the place. The solution was to run all codes under one server / client without anything breaking!</p> <p>This module was created to be:</p> <ul> <li>Fast</li> <li>Reliable</li> <li>More Organized</li> <li>Promise Implementation (by evaera)</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>You can download OneFrame package straight from Wally.</p> <p></p>"},{"location":"Start/","title":"Start","text":"<p>You can run the code in a folder or table by just doing this: <pre><code>local OneFrame = require(path.to.module)\nlocal testFolder = path.to.folder or { path.to.folder, path.to.folder2 }\nOneFrame.Start(testFolder, ignorePrint: boolean?, ...any):andThen(function()\nprint(\"Finished Executing\")\nend)\n</code></pre> You can basically run a folder or a table with folders. This executes code using Promise Implementation by evaera.</p>"},{"location":"Services/Event/","title":"Event","text":"<p>This is the Event Service of OneFrame</p>"},{"location":"Services/Event/#listening-for-events","title":"Listening for Events","text":"<p>This will listen any incoming signal to the server or client <pre><code>Event:Listen(id: string, function(...: any)\nprint(...)\nend)\n</code></pre></p>"},{"location":"Services/Event/#creating-a-send-signal","title":"Creating a Send Signal","text":"<p>This creates a Send Signal to send data to the server or client <pre><code>local event = Event.Send(id: string)\n</code></pre></p>"},{"location":"Services/Event/#creating-a-get-signal","title":"Creating a Get Signal","text":"<pre><code>local event = Event.Get(id: string)\n</code></pre>"},{"location":"Services/Event/#send-get-methods","title":"Send / Get Methods","text":"<p>If the Signal created was a Get Signal, it will return a value otherwise it won't return anything if Send Signal was created</p>"},{"location":"Services/Event/#server","title":":Server","text":"<pre><code>event:Server(...)\n</code></pre>"},{"location":"Services/Event/#client","title":":Client","text":"<pre><code>event:Client(player, ...)\n</code></pre>"},{"location":"Services/Event/#allclients","title":":AllClients","text":"<p><pre><code>event:AllClients(...)\n</code></pre> This only works with Send Signals.</p>"},{"location":"Services/Input/ContextAction/","title":"Context Action","text":"<p>This is a wrapper for Roblox's Context Action Service. We created this to address the issue with mobile button. The buttons are not 100% finished but it a usable.</p> <ul> <li> <p>Roblox's Context Action Service currently binds up to 8 actions in order for mobile buttons to work.</p> </li> <li> <p>We created this so you can create mobiles buttons without wrapping you head around the fact that you cant bind actions and edit buttons with Context Action Service.</p> </li> <li> <p>This will be removed when Roblox fixes their issue.</p> </li> </ul>"},{"location":"Services/Input/ContextAction/#bindaction","title":"BindAction","text":"<p><pre><code>ContextAction:BindAction(name: string, func: function, touchButton: boolean, ...)\n</code></pre> This create a action that binds with mobile buttons as well as keyboard, mouse and gamepad.</p>"},{"location":"Services/Input/ContextAction/#edit-image","title":"Edit Image","text":"<pre><code>ContextAction:EditImage(name: string, id: number)\n</code></pre> <p>This edits the image of the button.</p>"},{"location":"Services/Input/ContextAction/#edit-text","title":"Edit Text","text":"<pre><code>ContextAction:EditText(name: string, text: string)\n</code></pre> <p>This edits the text of the button</p>"},{"location":"Services/Input/ContextAction/#edit-property","title":"Edit Property","text":"<pre><code>ContextAction:EditProperty(name: string, properties)\n</code></pre> <p>This edit the properties in a table like format</p>"},{"location":"Services/Input/ContextAction/#get-button","title":"Get Button","text":"<pre><code>ContextAction:GetButton(name: string) : Button\n</code></pre> <p>This returns the button associated with the name</p>"},{"location":"Services/Input/ContextAction/#unbind-action","title":"Unbind Action","text":"<pre><code>ContextAction:UnbindAction(name)\n</code></pre> <p>This unbinds the action</p>"},{"location":"Services/Input/Keyboard/","title":"Keyboard","text":"<p>Keyboard module for OneFrame</p>"},{"location":"Services/Input/Keyboard/#contructing-a-new-keyboard","title":"Contructing a New Keyboard","text":"<p><pre><code>Keyboard.new() : Keyboard\n</code></pre> This contructs a new keyboard</p>"},{"location":"Services/Input/Keyboard/#methods","title":"Methods","text":""},{"location":"Services/Input/Keyboard/#iskeydown","title":":IsKeyDown","text":"<p><pre><code>Keyboard:IsKeyDown(key: Enum.KeyCode) : boolean\n</code></pre> This checks if a particular key is down</p>"},{"location":"Services/Input/Keyboard/#arekeysdown","title":":AreKeysDown","text":"<pre><code>Keyboard:AreKeysDown(key1: Enum.KeyCode, key2: Enum.KeyCode) : boolean\n</code></pre> <p>This checks if both of the keys are down</p>"},{"location":"Services/Input/Keyboard/#iseitherkeydown","title":":IsEitherKeyDown","text":"<pre><code>Keyboard:IsEitherKeyDown(key1: Enum.KeyCode, key2: Enum.KeyCode) : boolean\n</code></pre> <p>This checks if either one of the keys are down</p>"},{"location":"Services/Input/Keyboard/#create-combination","title":"Create Combination","text":"<pre><code>Keyboard:CreateCombination(name, ...)\n</code></pre> <p>This creates a keybind combination system</p>"},{"location":"Services/Input/Keyboard/#dismantle-combination","title":"Dismantle Combination","text":"<pre><code>Keyboard:DismantleCombination(name)\n</code></pre> <p>This destroys combinations that was created.</p>"},{"location":"Services/Input/Keyboard/#destory","title":"Destory","text":"<pre><code>Keyboard:Destroy()\n</code></pre> <p>This destroys the keyboard</p>"},{"location":"Services/Input/Keyboard/#signals","title":"Signals","text":"<p>Signals are created when <code>.new</code> is called.</p>"},{"location":"Services/Input/Keyboard/#keydown","title":"keydown","text":"<p><pre><code>Keyboard.keydown:Connect(function(key)\nprint(\"key pressed\", key)\nend)\n</code></pre> This listens for key that was pressed</p>"},{"location":"Services/Input/Keyboard/#keyup","title":"keyup","text":"<p><pre><code>Keyboard.keyup:Connect(function(key)\nprint(\"key released\", key)\nend)\n</code></pre> This listens for key that was released</p>"},{"location":"Services/Input/Keyboard/#conbination","title":"conbination","text":"<pre><code>Keyboard.combination:Connect(function(name)\nprint(`combination called: {name}`)\nend)\n</code></pre> <p>This listens and execute combination that was created!</p>"},{"location":"Services/Input/Mouse/","title":"Mouse","text":"<p>Mouse Module for OneFrame</p>"},{"location":"Services/Input/Mouse/#contructing-a-new-mouse","title":"Contructing a New Mouse","text":"<pre><code>Mouse.new() : Mouse\n</code></pre>"},{"location":"Services/Input/Mouse/#methods","title":"Methods","text":""},{"location":"Services/Input/Mouse/#isleftdown","title":"IsLeftDown","text":"<p><pre><code>Mouse:IsLeftDown() : boolean\n</code></pre> This checks if left mouse click is pressed</p>"},{"location":"Services/Input/Mouse/#isrightdown","title":"IsRightDown","text":"<p><pre><code>Mouse:IsRightDown() : boolean\n</code></pre> This checks if right mouse click is pressed</p>"},{"location":"Services/Input/Mouse/#getdelta","title":"GetDelta","text":"<p><pre><code>Mouse:GetDelta()\n</code></pre> This gets the mouse delta</p>"},{"location":"Services/Input/Mouse/#getray","title":"GetRay","text":"<pre><code>Mouse:GetRay(override: Vector2?)\n</code></pre> <p>This returns a viewpoint ray</p>"},{"location":"Services/Input/Mouse/#raycast","title":"Raycast","text":"<pre><code>Mouse:Raycast(RaycastParams: RaycastParams, distance: number?, override: Vector2?)\n</code></pre> <p>This returns a workspace raycast</p>"},{"location":"Services/Input/Mouse/#project","title":"Project","text":"<pre><code>Mouse:Project(distance: number?, override: Vector2?)\n</code></pre> <p>This project the distance of the mouse</p>"},{"location":"Services/Input/Mouse/#lock","title":"Lock","text":"<pre><code>Mouse:Lock()\n</code></pre> <p>This locks the mouse at its current position on the screen</p>"},{"location":"Services/Input/Mouse/#lockcenter","title":"LockCenter","text":"<pre><code>Mouse:LockCenter()\n</code></pre> <p>This locks the mouse in the center of the screen</p>"},{"location":"Services/Input/Mouse/#unlock","title":"Unlock","text":"<pre><code>Mouse:Unlock()\n</code></pre> <p>This unlocks the mouse from the screen</p>"},{"location":"Services/Input/Mouse/#destroy","title":"Destroy","text":"<pre><code>Mouse:Destroy\n</code></pre> <p>This destroys the mouse</p>"},{"location":"Services/Input/Mouse/#signals","title":"Signals","text":"<p>Signals are created when <code>.new</code> is called</p>"},{"location":"Services/Input/Mouse/#leftdown","title":"LeftDown","text":"<pre><code>Mouse.LeftDown:Connect(function()\nprint(\"left click pressed\")\nend)\n</code></pre> <p>This fires when left mouse click is pressed.</p>"},{"location":"Services/Input/Mouse/#leftup","title":"LeftUp","text":"<pre><code>Mouse.LeftUp:Connect(function()\nprint(\"left click released\")\nend)\n</code></pre>"},{"location":"Services/Input/Mouse/#rightdown","title":"RightDown","text":"<pre><code>Mouse.RightDown:Connect(function()\nprint(\"right click pressed\")\nend)\n</code></pre> <p>This fires when right mouse click is pressed.</p>"},{"location":"Services/Input/Mouse/#rightup","title":"RightUp","text":"<pre><code>Mouse.RightUp:Connect(function()\nprint(\"right click released\")\nend)\n</code></pre> <p>This fires when right mouse click is released.</p>"},{"location":"Services/Input/Mouse/#scrolled","title":"Scrolled","text":"<pre><code>Mouse.Scrolled:Connect(function(pos)\nprint(\"mouse scrolled; current position\", pos)\nend)\n</code></pre> <p>This fires when you scroll.</p>"},{"location":"Utilities/BindableSignal/","title":"Bindable Signal","text":"<p>This is like the Signal but for bindable functions</p>"},{"location":"Utilities/BindableSignal/#contructing-signals","title":"Contructing Signals","text":"<p><pre><code>BindableSignal.new() : BindableSignal\n</code></pre> This creates a new BindableSignal</p>"},{"location":"Utilities/BindableSignal/#methods","title":"Methods","text":""},{"location":"Utilities/BindableSignal/#connect","title":"Connect","text":"<pre><code>BindableSignal:Connect(function(...)\nprint(...)\nreturn true\nend)\n</code></pre> <p>this listens for signals and return data</p>"},{"location":"Utilities/BindableSignal/#fire","title":"Fire","text":"<pre><code>local data = BindableSignal:Fire(...) : any\nprint(data)\n</code></pre> <p>This send and waits for data to be returns</p>"},{"location":"Utilities/BindableSignal/#destroy","title":"Destroy","text":"<pre><code>BindableSignal:Destroy()\n</code></pre> <p>This destroys the bindable signal.</p>"},{"location":"Utilities/Signal/","title":"Signal","text":""},{"location":"Utilities/Signal/#contructing-a-new-signal","title":"Contructing a New Signal","text":"<pre><code>Signal.new() : Signal\n</code></pre> <p>This contructs a new signal</p>"},{"location":"Utilities/Signal/#methods","title":"Methods","text":""},{"location":"Utilities/Signal/#connect","title":"Connect","text":"<pre><code>Signal:Connect(function(...)\nprint(...)\nend)\n</code></pre> <p>This listens for signal</p>"},{"location":"Utilities/Signal/#fire","title":"Fire","text":"<pre><code>Signal:Fire(...)\n</code></pre> <p>This fires any params</p>"},{"location":"Utilities/Signal/#wait","title":"Wait","text":"<pre><code>Signal:Wait()\n</code></pre> <p>This waits for signals</p>"},{"location":"Utilities/Signal/#destroy","title":"Destroy","text":"<pre><code>Signal:Destroy()\n</code></pre>"}]}