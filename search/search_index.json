{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#what-is-oneframe","title":"What is OneFrame?","text":"<p>OneFrame is a module that allows developers to run multiple modular code under one server / client.</p> <p>It was designed to give developers a sense of ease when making games and other projects.</p>"},{"location":"#why-choose-oneframe","title":"Why Choose OneFrame","text":"<p>There was a problem with games always scripts all over the place. The solution was to run all codes under one server / client without anything breaking!</p> <p>This module was created to be:</p> <ul> <li>Fast</li> <li>Reliable</li> <li>More Organized</li> <li>Promise Implementation (by evaera)</li> </ul>"},{"location":"installation/","title":"Installation","text":"<p>You can download OneFrame package straight from Wally.</p> <p>New Updates</p> <p>New Updates will be coming to OneFrame in the future</p> <p></p>"},{"location":"api/","title":"Overview of OneFrame","text":"<p>This is a layout of the OneFrame main module.</p> <pre><code>OneFrame:\n    - Controllers -&gt; Controllers\n    - Promise -&gt; Promise\n    - Event -&gt; Event\n\n    - Start -&gt; ()\n    - CreateSignal -&gt; ()\n    - CreateBindableSignal -&gt; ()\n    - CreateCleany -&gt; ()\n\n    - Input {\n        - Keyboard\n        - Mouse\n        - ContextAction\n    }\n</code></pre> <p>This is a complete overview of what it looks like in the OneFrame Module</p>"},{"location":"api/Start/","title":"Start","text":"<p>You can run the code in a folder or table by just doing this: <pre><code>local OneFrame = require(path.to.module)\nlocal testFolder = path.to.folder or { path.to.folder, path.to.folder2 }\nOneFrame.Start(testFolder, ignorePrint: boolean?, ...any):andThen(function()\nprint(\"Finished Executing\")\nend)\n</code></pre> You can basically run a folder or a table with folders.</p> <p>Promise</p> <p>This executes code using Promise module by evaera.</p>"},{"location":"api/Main%20Aspect/Component/","title":"Component","text":""},{"location":"api/Main%20Aspect/Component/#creating-a-component","title":"Creating a Component","text":"<pre><code>local myComp = Component:extend(name: string, test: boolean)\n</code></pre> <p>This will create a component to be run when <code>.Start</code> is called</p> <p>Info</p> <p>If the <code>test</code> param is true then the code will only run in studio and not on the game.</p>"},{"location":"api/Main%20Aspect/Component/#main-functions","title":"Main Functions","text":"<pre><code>function myComp:init(...)\n-- this will initialize the component with variables\nend\nfunction myComp:preload(...)\n-- this will preload the code before executing the code\nend\nfunction myComp:render(...)\n-- this will execute the code.\nend\nfunction myComp:closing(...)\n-- this will run when the game is closing\nend\n</code></pre>"},{"location":"api/Main%20Aspect/Component/#methods","title":"Methods","text":""},{"location":"api/Main%20Aspect/Component/#state","title":"State","text":""},{"location":"api/Main%20Aspect/Component/#setstate","title":"<code>:setState</code>","text":"<pre><code>Component:setState(value: any)\n</code></pre> <p>This will set the state of the any value</p>"},{"location":"api/Main%20Aspect/Component/#state_1","title":"<code>.state</code>","text":"<pre><code>Component.state\n</code></pre> <p>This will return the state what was set</p> <p>About the State</p> <p><code>.state</code> and <code>:setState</code> can only be called when <code>:extend</code> is called. Example: Within the <code>:render</code> code block, you will have something like <code>self.state</code> or <code>self:setState</code></p>"},{"location":"api/Main%20Aspect/Component/#getcomponent","title":"GetComponent","text":"<pre><code>Component:GetComponent(name) -&gt; {[any]: any}\n</code></pre> <p>This will return the component with that name from the index.</p>"},{"location":"api/Main%20Aspect/Component/#get-components","title":"Get Components","text":"<pre><code>Component:GetComponents() -&gt; {[any]: any}\n</code></pre> <p>This will return all the components in the index</p>"},{"location":"api/Main%20Aspect/Component/#get-registered-signal","title":"Get Registered Signal","text":"<pre><code>Component:GetRegisteredSignal(function(name)\nprint(name, \"was created!\")\nend)\n</code></pre> <p>This will return the name of the component that was created</p>"},{"location":"api/Main%20Aspect/Controllers/","title":"Controllers","text":""},{"location":"api/Main%20Aspect/Controllers/#add-controllers","title":"Add Controllers","text":"<p><pre><code>Controllers:AddController(path: Instance)\n</code></pre> This adds controllers to the index to be recognized when using <code>:GetController</code>.</p>"},{"location":"api/Main%20Aspect/Controllers/#create-controller","title":"Create Controller","text":"<pre><code>Controllers:CreateController {\nName: string,\n[any]: any\n}\n</code></pre> <p>This will create controllers to be used in scripts.</p>"},{"location":"api/Main%20Aspect/Controllers/#get-controller","title":"Get Controller","text":"<pre><code>Controllers:GetController(name: string)\n</code></pre> <p>This gets controllers that was created.</p>"},{"location":"api/Main%20Aspect/Controllers/#get-controllers","title":"Get Controllers","text":"<pre><code>Controllers:GetControllers()\n</code></pre> <p>This will return all the controllers.</p>"},{"location":"api/Main%20Aspect/Functional%20Component/","title":"Functional Component","text":"<p>This is where we create component in a module based on functions</p> <pre><code>return function (render, closing)\nlocal hello = render(function(...)\nprint(...) --&gt; Variable from .Start\nreturn true\nend)\nprint(hello) --&gt; this will pring true\nclosing(function()\nprint(\"game is closing\")\nend)\n-- this will run when the game is shutting down\nend\n</code></pre>"},{"location":"api/Services/Event/","title":"Event","text":"<p>This is the Event Service of OneFrame</p>"},{"location":"api/Services/Event/#listening-for-events","title":"Listening for Events","text":"<p>This will listen any incoming signal to the server or client <pre><code>Event:Listen(id: string, function(...: any)\nprint(...)\nend)\n</code></pre></p>"},{"location":"api/Services/Event/#creating-a-send-signal","title":"Creating a Send Signal","text":"<p>This creates a Send Signal to send data to the server or client <pre><code>local event = Event.Send(id: string)\n</code></pre></p>"},{"location":"api/Services/Event/#creating-a-get-signal","title":"Creating a Get Signal","text":"<pre><code>local event = Event.Get(id: string)\n</code></pre>"},{"location":"api/Services/Event/#send-get-methods","title":"Send / Get Methods","text":"<p>If the Signal created was a Get Signal, it will return a value otherwise it won't return anything if Send Signal was created</p>"},{"location":"api/Services/Event/#server","title":":Server","text":"<pre><code>event:Server(...)\n</code></pre>"},{"location":"api/Services/Event/#client","title":":Client","text":"<pre><code>event:Client(player, ...)\n</code></pre>"},{"location":"api/Services/Event/#allclients","title":":AllClients","text":"<p><pre><code>event:AllClients(...)\n</code></pre> This only works with Send Signals.</p>"},{"location":"api/Services/Input/ContextAction/","title":"Context Action","text":"<p>This is a wrapper for Roblox's Context Action Service. We created this to address the issue with mobile button. The buttons are not 100% finished but it a usable.</p> <ul> <li> <p>Roblox's Context Action Service currently binds up to 8 actions in order for mobile buttons to work.</p> </li> <li> <p>We created this so you can create mobiles buttons without wrapping you head around the fact that you cant bind actions and edit buttons with Context Action Service.</p> </li> <li> <p>This will be removed when Roblox fixes their issue.</p> </li> </ul>"},{"location":"api/Services/Input/ContextAction/#bindaction","title":"BindAction","text":"<p><pre><code>ContextAction:BindAction(name: string, func: function, touchButton: boolean, ...)\n</code></pre> This create a action that binds with mobile buttons as well as keyboard, mouse and gamepad.</p>"},{"location":"api/Services/Input/ContextAction/#edit-image","title":"Edit Image","text":"<pre><code>ContextAction:EditImage(name: string, id: number)\n</code></pre> <p>This edits the image of the button.</p>"},{"location":"api/Services/Input/ContextAction/#edit-text","title":"Edit Text","text":"<pre><code>ContextAction:EditText(name: string, text: string)\n</code></pre> <p>This edits the text of the button</p>"},{"location":"api/Services/Input/ContextAction/#edit-property","title":"Edit Property","text":"<pre><code>ContextAction:EditProperty(name: string, properties)\n</code></pre> <p>This edit the properties in a table like format</p>"},{"location":"api/Services/Input/ContextAction/#get-button","title":"Get Button","text":"<pre><code>ContextAction:GetButton(name: string) : Button\n</code></pre> <p>This returns the button associated with the name</p>"},{"location":"api/Services/Input/ContextAction/#unbind-action","title":"Unbind Action","text":"<pre><code>ContextAction:UnbindAction(name)\n</code></pre> <p>This unbinds the action</p>"},{"location":"api/Services/Input/Keyboard/","title":"Keyboard","text":"<p>Keyboard module for OneFrame</p>"},{"location":"api/Services/Input/Keyboard/#contructing-a-new-keyboard","title":"Contructing a New Keyboard","text":"<p><pre><code>Keyboard.new() : Keyboard\n</code></pre> This contructs a new keyboard</p>"},{"location":"api/Services/Input/Keyboard/#methods","title":"Methods","text":"<p>Before Using These Methods</p> <p>Remember to call <code>.new</code> before using these methods, otherwise the code won't work.</p>"},{"location":"api/Services/Input/Keyboard/#iskeydown","title":":IsKeyDown","text":"<p><pre><code>Keyboard:IsKeyDown(key: Enum.KeyCode) : boolean\n</code></pre> This checks if a particular key is down</p>"},{"location":"api/Services/Input/Keyboard/#arekeysdown","title":":AreKeysDown","text":"<pre><code>Keyboard:AreKeysDown(key1: Enum.KeyCode, key2: Enum.KeyCode) : boolean\n</code></pre> <p>This checks if both of the keys are down</p>"},{"location":"api/Services/Input/Keyboard/#iseitherkeydown","title":":IsEitherKeyDown","text":"<pre><code>Keyboard:IsEitherKeyDown(key1: Enum.KeyCode, key2: Enum.KeyCode) : boolean\n</code></pre> <p>This checks if either one of the keys are down</p>"},{"location":"api/Services/Input/Keyboard/#create-combination","title":"Create Combination","text":"<pre><code>Keyboard:CreateCombination(name, ...)\n</code></pre> <p>This creates a keybind combination system</p>"},{"location":"api/Services/Input/Keyboard/#dismantle-combination","title":"Dismantle Combination","text":"<pre><code>Keyboard:DismantleCombination(name)\n</code></pre> <p>This destroys combinations that was created.</p>"},{"location":"api/Services/Input/Keyboard/#destory","title":"Destory","text":"<pre><code>Keyboard:Destroy()\n</code></pre> <p>This destroys the keyboard</p>"},{"location":"api/Services/Input/Keyboard/#signals","title":"Signals","text":"<p>Signals are created when <code>.new</code> is called.</p>"},{"location":"api/Services/Input/Keyboard/#keydown","title":"keydown","text":"<p><pre><code>Keyboard.keydown:Connect(function(key)\nprint(\"key pressed\", key)\nend)\n</code></pre> This listens for key that was pressed</p>"},{"location":"api/Services/Input/Keyboard/#keyup","title":"keyup","text":"<p><pre><code>Keyboard.keyup:Connect(function(key)\nprint(\"key released\", key)\nend)\n</code></pre> This listens for key that was released</p>"},{"location":"api/Services/Input/Keyboard/#conbination","title":"conbination","text":"<pre><code>Keyboard.combination:Connect(function(name)\nprint(`combination called: {name}`)\nend)\n</code></pre> <p>This listens and execute combination that was created!</p>"},{"location":"api/Services/Input/Mouse/","title":"Mouse","text":"<p>Mouse Module for OneFrame</p>"},{"location":"api/Services/Input/Mouse/#contructing-a-new-mouse","title":"Contructing a New Mouse","text":"<pre><code>Mouse.new() : Mouse\n</code></pre>"},{"location":"api/Services/Input/Mouse/#methods","title":"Methods","text":"<p>Before Using These Methods</p> <p>Remember to call <code>.new</code> before using these methods, otherwise the code won't work.</p>"},{"location":"api/Services/Input/Mouse/#isleftdown","title":"IsLeftDown","text":"<p><pre><code>Mouse:IsLeftDown() : boolean\n</code></pre> This checks if left mouse click is pressed</p>"},{"location":"api/Services/Input/Mouse/#isrightdown","title":"IsRightDown","text":"<p><pre><code>Mouse:IsRightDown() : boolean\n</code></pre> This checks if right mouse click is pressed</p>"},{"location":"api/Services/Input/Mouse/#getdelta","title":"GetDelta","text":"<p><pre><code>Mouse:GetDelta()\n</code></pre> This gets the mouse delta</p>"},{"location":"api/Services/Input/Mouse/#getray","title":"GetRay","text":"<pre><code>Mouse:GetRay(override: Vector2?)\n</code></pre> <p>This returns a viewpoint ray</p>"},{"location":"api/Services/Input/Mouse/#raycast","title":"Raycast","text":"<pre><code>Mouse:Raycast(RaycastParams: RaycastParams, distance: number?, override: Vector2?)\n</code></pre> <p>This returns a workspace raycast</p>"},{"location":"api/Services/Input/Mouse/#project","title":"Project","text":"<pre><code>Mouse:Project(distance: number?, override: Vector2?)\n</code></pre> <p>This project the distance of the mouse</p>"},{"location":"api/Services/Input/Mouse/#lock","title":"Lock","text":"<pre><code>Mouse:Lock()\n</code></pre> <p>This locks the mouse at its current position on the screen</p>"},{"location":"api/Services/Input/Mouse/#lockcenter","title":"LockCenter","text":"<pre><code>Mouse:LockCenter()\n</code></pre> <p>This locks the mouse in the center of the screen</p>"},{"location":"api/Services/Input/Mouse/#unlock","title":"Unlock","text":"<pre><code>Mouse:Unlock()\n</code></pre> <p>This unlocks the mouse from the screen</p>"},{"location":"api/Services/Input/Mouse/#destroy","title":"Destroy","text":"<pre><code>Mouse:Destroy\n</code></pre> <p>This destroys the mouse</p>"},{"location":"api/Services/Input/Mouse/#signals","title":"Signals","text":"<p>Signals are created when <code>.new</code> is called</p>"},{"location":"api/Services/Input/Mouse/#leftdown","title":"LeftDown","text":"<pre><code>Mouse.LeftDown:Connect(function()\nprint(\"left click pressed\")\nend)\n</code></pre> <p>This fires when left mouse click is pressed.</p>"},{"location":"api/Services/Input/Mouse/#leftup","title":"LeftUp","text":"<pre><code>Mouse.LeftUp:Connect(function()\nprint(\"left click released\")\nend)\n</code></pre>"},{"location":"api/Services/Input/Mouse/#rightdown","title":"RightDown","text":"<pre><code>Mouse.RightDown:Connect(function()\nprint(\"right click pressed\")\nend)\n</code></pre> <p>This fires when right mouse click is pressed.</p>"},{"location":"api/Services/Input/Mouse/#rightup","title":"RightUp","text":"<pre><code>Mouse.RightUp:Connect(function()\nprint(\"right click released\")\nend)\n</code></pre> <p>This fires when right mouse click is released.</p>"},{"location":"api/Services/Input/Mouse/#scrolled","title":"Scrolled","text":"<pre><code>Mouse.Scrolled:Connect(function(pos)\nprint(\"mouse scrolled; current position\", pos)\nend)\n</code></pre> <p>This fires when you scroll.</p>"},{"location":"api/Utilities/BindableSignal/","title":"Bindable Signal","text":"<p>This is like the Signal but for bindable functions</p>"},{"location":"api/Utilities/BindableSignal/#contructing-signals","title":"Contructing Signals","text":"<p><pre><code>BindableSignal.new() : BindableSignal\n</code></pre> This creates a new BindableSignal</p>"},{"location":"api/Utilities/BindableSignal/#methods","title":"Methods","text":"<p>Before Using These Methods</p> <p>Remember to call <code>.new</code> before using these methods, otherwise the code won't work.</p>"},{"location":"api/Utilities/BindableSignal/#connect","title":"Connect","text":"<pre><code>BindableSignal:Connect(function(...)\nprint(...)\nreturn true\nend)\n</code></pre> <p>this listens for signals and return data</p>"},{"location":"api/Utilities/BindableSignal/#fire","title":"Fire","text":"<pre><code>local data = BindableSignal:Fire(...) : any\nprint(data)\n</code></pre> <p>This send and waits for data to be returns</p>"},{"location":"api/Utilities/BindableSignal/#destroy","title":"Destroy","text":"<pre><code>BindableSignal:Destroy()\n</code></pre> <p>This destroys the bindable signal.</p>"},{"location":"api/Utilities/Cleany/","title":"Cleany","text":"<p>A Cleaning Service for managing garbage collection and memory leaks</p>"},{"location":"api/Utilities/Cleany/#contructing-a-new-cleaner","title":"Contructing a New Cleaner","text":"<pre><code>Cleany.create() -&gt; Cleaner\n</code></pre>"},{"location":"api/Utilities/Cleany/#methods","title":"Methods","text":"<p>Before Using These Methods</p> <p>Remember to call <code>.create</code> before running these methods</p>"},{"location":"api/Utilities/Cleany/#add","title":"Add","text":"<pre><code>Cleany:Add(object) -&gt; object\n</code></pre> <p>This will add any object to the collector and return the object.</p>"},{"location":"api/Utilities/Cleany/#remove","title":"Remove","text":"<pre><code>Cleany:Remove(object)\n</code></pre> <p>This will clean and remove the object from the collector.</p>"},{"location":"api/Utilities/Cleany/#contruct","title":"Contruct","text":"<pre><code>Cleany:Contruct(class, ...)\n</code></pre> <p>This will contruct any function or module and add it to the collector</p> <p>When Using Contruct </p> <p>The module must contain a <code>.new</code> function in order for it to work.</p>"},{"location":"api/Utilities/Cleany/#add-multiple","title":"Add Multiple","text":"<pre><code>Cleany:AddMultiple(...) -&gt; {objects}\n</code></pre> <p>This will add objects to the collector and it will return a table with the objects.</p>"},{"location":"api/Utilities/Cleany/#connect","title":"Connect","text":"<pre><code>Cleany:Connect(connection: RBXScriptSignal, callback: (...) -&gt; ()) -&gt; RBXScriptConnection\n</code></pre> <p>This will add any script connection to the collector to be cleaned.</p>"},{"location":"api/Utilities/Cleany/#clean","title":"Clean","text":"<pre><code>Cleany:Clean()\n</code></pre> <p>This will clean and destroy all the items in the collector.</p> <p>About <code>:Clean</code></p> <p>If the items in the collector is an <code>RBXScriptConnection</code>, then it will disconnect the event. If the item is an <code>Instance</code>, then it will destroy the item. If the item is a <code>corotine</code>, it will close the item. If the item is a <code>modular code</code>, it will either destroy or disconnect the code, if your code contains either one of the 2 methods</p>"},{"location":"api/Utilities/Signal/","title":"Signal","text":""},{"location":"api/Utilities/Signal/#contructing-a-new-signal","title":"Contructing a New Signal","text":"<pre><code>Signal.new() : Signal\n</code></pre> <p>This contructs a new signal</p>"},{"location":"api/Utilities/Signal/#methods","title":"Methods","text":"<p>Before Using These Methods</p> <p>Remember to call <code>.new</code> before using these methods, otherwise the code won't work.</p>"},{"location":"api/Utilities/Signal/#connect","title":"Connect","text":"<pre><code>Signal:Connect(function(...)\nprint(...)\nend)\n</code></pre> <p>This listens for signal</p>"},{"location":"api/Utilities/Signal/#fire","title":"Fire","text":"<pre><code>Signal:Fire(...)\n</code></pre> <p>This fires any params</p>"},{"location":"api/Utilities/Signal/#wait","title":"Wait","text":"<pre><code>Signal:Wait()\n</code></pre> <p>This waits for signals</p>"},{"location":"api/Utilities/Signal/#destroy","title":"Destroy","text":"<pre><code>Signal:Destroy()\n</code></pre>"},{"location":"examples/","title":"Start","text":"<p>Code Samples Based of the OneFrame Module</p>"},{"location":"examples/#executing-the-code","title":"Executing the Code","text":"<pre><code>local OneFrame = require(path.to.module)\nlocal Folder = path.to.folder or {path.to.folder, path.to.another.folder}\nOneFrame.Start(Folder, true, \"Hello\"):andThen(function()\nprint(\"Finished Executing the Code!\")\nend)\n</code></pre> <p>More Examples Comming Soon</p>"},{"location":"examples/Component/","title":"Component","text":"<p>Sample Code for the Component</p> <pre><code>local OneFrame = require(path.to.module)\nlocal myComponent = OneFrame.Component:extend(\"Test_Hello\")\nfunction myComponent:init()\nself:setState({\nhello = 10,\nbye = 10,\n})\nend\nfunction myComponent:preload(...)\nprint(...) -- &gt; \"Hello\"\nend\nfunction myComponent:render(...)\nself:setState({...})\nprint(self.state)\nend\nfunction myComponent:closing()\nself:setState(function(state)\nprint(\"state before shutting down\", state)\nreturn {}\nend)\nprint(\"shutting down!\")\nend\nreturn myComponent\n</code></pre>"},{"location":"examples/Controllers/","title":"Controllers","text":"<p>Sample Code for Controllers</p>"},{"location":"examples/Controllers/#creating-controllers","title":"Creating Controllers","text":"<pre><code>local OneFrame = require(path.to.module)\nlocal Controllers = OneFrame.Controllers\nlocal myController = Controllers.CreateController {\nName = \"Test Controller\",\nSignal = OneFrame.CreateSignal()\n}\nfunction myController:Send()\nself.Signal:Fire(\"hello\")\nend\nreturn myController\n</code></pre>"},{"location":"examples/Controllers/#initialing-the-controllers-in-the-server-client","title":"Initialing the Controllers in the Server / Client","text":"<pre><code>local OneFrame = require(path.to.module)\nlocal Controllers = OneFrame.Controllers\nControllers.AddControllers(path.to.controllers)\n</code></pre>"},{"location":"examples/Controllers/#getting-controllers","title":"Getting Controllers","text":"<pre><code>local OneFrame = require(path.to.module)\nlocal Controllers = OneFrame.Controllers\nlocal Controller = Controllers.GetControllers(\"Test Controller\")\nController.Signal:Connect(function(...)\nprint(...) --&gt; \"hello\"\nend)\nController:Send() --. This will send the data to the signal\n</code></pre>"},{"location":"examples/Functional%20Component/","title":"Functional Component","text":"<p>Sample Code for Functional Components</p> <pre><code>return function(render, closing)\nlocal data = render(function(...)\nlocal items = {...}\nprint(...)\nreturn items\nend)\nprint(data) --&gt; print items in a table\nclosing(function()\nprint(\"closing game\")\nend)\nend\n</code></pre>"}]}