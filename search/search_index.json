{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to OneFrame","text":""},{"location":"#what-is-oneframe","title":"What is OneFrame?","text":"<p>OneFrame is a module that allows developers to run multiple modular code under one server / client.</p> <p>It was designed to give developers a sense of ease when making games and other projects.</p>"},{"location":"#why-choose-oneframe","title":"Why Choose OneFrame","text":"<p>There was a problem with games always scripts all over the place. The solution was to run all codes under one server / client without anything breaking!</p> <p>This module was created to be:</p> <ul> <li>Fast</li> <li>Reliable</li> <li>More Organized</li> <li>Promise Implementation (by evaera)</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>You can download OneFrame package straight from Wally.</p> <p></p>"},{"location":"Start/","title":"Starting OneFrame","text":"<p>You can start OneFrame by simply doing this <pre><code>local OneFrame = require(path.to.module)\nlocal testFolder = path.to.folder or { path.to.folder, path.to.folder2 }\nOneFrame.Start(testFolder, ignorePrint: boolean?, ...any):andThen(function()\nprint(\"Finished Executing\")\nend)\n</code></pre> You can basically run a folder or a table with folders. This executes code using Promise Implementation by evaera.</p>"},{"location":"Services/Event/","title":"Event","text":"<p>This is the Event Service of OneFrame</p>"},{"location":"Services/Event/#listening-for-events","title":"Listening for Events","text":"<p>This will listen any incoming signal to the server or client <pre><code>Event:Listen(id: string, function(...: any)\nprint(...)\nend)\n</code></pre></p>"},{"location":"Services/Event/#creating-a-send-signal","title":"Creating a Send Signal","text":"<p>This creates a Send Signal to send data to the server or client <pre><code>local event = Event.Send(id: string)\n</code></pre></p>"},{"location":"Services/Event/#creating-a-get-signal","title":"Creating a Get Signal","text":"<pre><code>local event = Event.Get(id: string)\n</code></pre>"},{"location":"Services/Event/#send-get-methods","title":"Send / Get Methods","text":"<p>If the Signal created was a Get Signal, it will return a value otherwise it won't return anything if Send Signal was created</p>"},{"location":"Services/Event/#server","title":":Server","text":"<pre><code>event:Server(...)\n</code></pre>"},{"location":"Services/Event/#client","title":":Client","text":"<pre><code>event:Client(player, ...)\n</code></pre>"},{"location":"Services/Event/#allclients","title":":AllClients","text":"<p><pre><code>event:AllClients(...)\n</code></pre> This only works with Send Signals.</p>"},{"location":"Services/Input/Keyboard/","title":"Keyboard","text":"<p>Keyboard module for OneFrame</p>"},{"location":"Services/Input/Keyboard/#contructing-a-new-keyboard","title":"Contructing a New Keyboard","text":"<p><pre><code>Keyboard.new() : Keyboard\n</code></pre> This contructs a new keyboard</p>"},{"location":"Services/Input/Keyboard/#methods","title":"Methods","text":""},{"location":"Services/Input/Keyboard/#iskeydown","title":":IsKeyDown","text":"<p><pre><code>Keyboard:IsKeyDown(key: Enum.KeyCode) : boolean\n</code></pre> This checks if a particular key is down</p>"},{"location":"Services/Input/Keyboard/#arekeysdown","title":":AreKeysDown","text":"<pre><code>Keyboard:AreKeysDown(key1: Enum.KeyCode, key2: Enum.KeyCode) : boolean\n</code></pre> <p>This checks if both of the keys are down</p>"},{"location":"Services/Input/Keyboard/#iseitherkeydown","title":":IsEitherKeyDown","text":"<pre><code>Keyboard:IsEitherKeyDown(key1: Enum.KeyCode, key2: Enum.KeyCode) : boolean\n</code></pre> <p>This checks if either one of the keys are down</p>"},{"location":"Services/Input/Keyboard/#create-combination","title":"Create Combination","text":"<pre><code>Keyboard:CreateCombination(name, ...)\n</code></pre> <p>This creates a keybind combination system</p>"},{"location":"Services/Input/Keyboard/#dismantle-combination","title":"Dismantle Combination","text":"<pre><code>Keyboard:DismantleCombination(name)\n</code></pre> <p>This destroys combinations that was created.</p>"},{"location":"Services/Input/Keyboard/#destory","title":"Destory","text":"<pre><code>Keyboard:Destroy()\n</code></pre> <p>This destroys the keyboard</p>"},{"location":"Services/Input/Keyboard/#signals","title":"Signals","text":"<p>Signals are created when <code>.new</code> is called.</p>"},{"location":"Services/Input/Keyboard/#keydown","title":"keydown","text":"<p><pre><code>Keyboard.keydown:Connect(function(key)\nprint(\"key pressed\", key)\nend)\n</code></pre> This listens for key that was pressed</p>"},{"location":"Services/Input/Keyboard/#keyup","title":"keyup","text":"<p><pre><code>Keyboard.keyup:Connect(function(key)\nprint(\"key released\", key)\nend)\n</code></pre> This listens for key that was released</p>"},{"location":"Services/Input/Keyboard/#conbination","title":"conbination","text":"<pre><code>Keyboard.combination:Connect(function(name)\nprint(`combination called: {name}`)\nend)\n</code></pre> <p>This listens and execute combination that was created!</p>"}]}